# -*- coding: utf-8 -*-
"""PsSemestral_Topicos2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1icC_ocfcow6JYy4nUPOKEjK-sV7MLwUo
"""
##
#Michelle Brenes
#Laser Rivera
#Julio Marin 
#Mohnish Hemdev
#Jayson Morán

from flask import Flask
import dash
import dash_core_components as dcc 
import dash_html_components as html
import plotly.express as px
import pandas as pd
from dash.dependencies import Input,Output
import matplotlib.pyplot as plt
from urllib.request import urlopen
import geopandas as gpd
server=Flask(__name__)

#Importe del json que contiene al mapa de panama
path = 'https://raw.githubusercontent.com/JaysonAMR/Semestral_Topicos/main/Json/PAN_ADM01_PROV_V01.topo.json'
geo_pan = gpd.read_file(path)

#Importe del csv con los datos del movimiento de contenedores de los puertos
df = pd.read_csv('https://raw.githubusercontent.com/JaysonAMR/Semestral_Topicos/main/Resumido-por-a%C3%B1os.csv')

geo_pan.head() #para ver lo que tiene el json de panamá

df.head() #para ver lo que tiene el data frame

app = dash.Dash(__name__) #creacion del dash
server = app.server
server = app.server
##
## titulo pagina
app.title='Proyecto Semestral - Grupo 6'
app.layout = html.Div([
    
    html.Div([ #Creacion del Titulo
        html.H1('Movimientos de contenedores en el SPN'), #nombre
        html.Img(src='assets/contenedor.png') #introduccion de figura de contenedores
    ], className = 'banner'),#assets perzonalizado de color azul

    html.Div([
        html.Div([#creacion de los radio boton
            html.P('Selecciona el tipo de transito', className= 'flix_label', style={'color':'black', 'margin-top': '2px'}),
            dcc.RadioItems( id= 'tipo-radioitem',
                            labelStyle={'display': 'inline-block'},
                            options=[
                                {'label' : 'Local', 'value' : 'Local'},
                                {'label' : 'Trasbordo', 'value' : 'Trasbordo'},
                                {'label' : 'Zona Libre', 'value' : 'Zona Libre'}
                            ], value= 'Local',
                            style= {'text-aling' : 'center' , 'color' : 'black'}, className= 'dcc_compon'),
        ], className= 'create_container2 five columns', style= {'margin-bottom': '20px'}), #assets personalizado para tener un fondo rectangular
        
    ], className = 'row flex-display'),

    html.Div([
        html.Div([#Creacion del espacio para la grafica 1, grafica de la izquierda
            dcc.Graph(id = 'my_graph', figure = {})
        ], className= 'create_container2 nine colums'), 

        html.Div([#Creacion del espacio para la grafica 2, mapa de la derecha
            dcc.Graph(id = 'mpie_graph', figure = {})
        ], className= 'create_container2 nine colums'), 
    ], className='row flex-display'),

],id='mainContainer', style= {'display': 'flex', 'flex-direction': 'column'})#assets perzonalizados para tener un fondo rectangular

#GRAFICA
@app.callback (
    Output('my_graph', component_property= 'figure'), #2. para imprimirlo en el espacio seleccionado 
    [Input('tipo-radioitem', component_property='value')]#1. se toca el radio boton, ejecuta lo que está abajo y retorna fi y llama a my_grap
)

def update_graph(value):
    if value == 'Local':
        fig = px.bar(
            data_frame=df,
            animation_frame='Año', #No se como ponerlo arriba
            x = 'Puerto',
            y = 'Local'
        )
    elif value == 'Trasbordo':
        fig = px.bar(
            data_frame=df,
            animation_frame='Año', #No se como ponerlo arriba
            x = 'Puerto',
            y = 'Trasbordo'
        )
    else:
        fig = px.bar(
            data_frame=df,
            animation_frame='Año', #No se como ponerlo arriba
            x = 'Puerto',
            y = 'Zona Libre'
        )
    return fig

#MAPA

@app.callback (
    Output('mpie_graph', component_property= 'figure'),#2. espacio seleccionado apra imprimir el mapa
    [Input('tipo-radioitem', component_property='value')]#1. Ejecuta la parte de abajo y retorna fig para imprimirla en mpie_grapgh
)
def update_graph(value):
    if value == 'Local':
        fig = px.choropleth(data_frame=df, 
                    geojson=geo_pan, 
                    locations='PROV_NAME', # nombre de la columna del Dataframe
                    featureidkey='properties.PROV_NAME',  # ruta al campo del archivo GeoJSON con el que se hará la relación (nombre de los estados)
                    color='Local', #El color depende de las cantidades
                    color_continuous_scale="greens", #greens
                    animation_frame='Año' #barra de animacion de año
                    #scope="north america"
                   )
        fig.update_geos(showcountries=True, showcoastlines=True, showland=True, fitbounds="locations")
    elif value == 'Trasbordo':
        fig = px.choropleth(data_frame=df, 
                    geojson=geo_pan, 
                    locations='PROV_NAME', # nombre de la columna del Dataframe
                    featureidkey='properties.PROV_NAME',  # ruta al campo del archivo GeoJSON con el que se hará la relación (nombre de los estados)
                    color='Trasbordo', #El color depende de las cantidades
                    color_continuous_scale="greens", #greens
                    animation_frame='Año' #barra de animacion de año
                    #scope="north america"
                   )
        fig.update_geos(showcountries=True, showcoastlines=True, showland=True, fitbounds="locations")
    else:
        fig = px.choropleth(data_frame=df, 
                    geojson=geo_pan, 
                    locations='PROV_NAME', # nombre de la columna del Dataframe
                    featureidkey='properties.PROV_NAME',  # ruta al campo del archivo GeoJSON con el que se hará la relación (nombre de los estados)
                    color='Zona Libre', #El color depende de las cantidades
                    color_continuous_scale="greens", #greens
                    animation_frame='Año' #barra de animacion de año
                    #scope="north america"
                   )
        fig.update_geos(showcountries=True, showcoastlines=True, showland=True, fitbounds="locations")
    return fig

if __name__ == ('__main__'): #para iniciar el app
    app.run_server(port=5003)
#df = pd.read_csv("D:\CATALAG\Archivos Semestral\PSFC.csv")
#df.head()